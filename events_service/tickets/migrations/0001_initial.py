# Generated by Django 3.1.1 on 2020-10-23 22:56

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import tickets.models.choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(blank=True, max_length=20)),
                ('promoter', models.CharField(blank=True, max_length=255)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=20), size=None)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=255)),
                ('capacity', models.PositiveIntegerField()),
                ('events', models.ManyToManyField(related_name='venues', through='tickets.Date', to='tickets.Event')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=20)),
                ('quantity', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=11)),
                ('date', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_types', to='tickets.date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('number', models.PositiveIntegerField()),
                ('row', models.PositiveIntegerField()),
                ('gate', models.CharField(max_length=20)),
                ('state', models.CharField(choices=[(tickets.models.choices.SeatState['GOOD'], 'Good'), (tickets.models.choices.SeatState['WEARY'], 'Weary'), (tickets.models.choices.SeatState['BROKEN'], 'Broken')], default=tickets.models.choices.SeatState['GOOD'], max_length=20)),
                ('section', models.CharField(max_length=20)),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='venue_seats', to='tickets.venue')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='date',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.event'),
        ),
        migrations.AddField(
            model_name='date',
            name='venue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.venue'),
        ),
        migrations.CreateModel(
            name='TicketTypeSeat',
            fields=[
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[(tickets.models.choices.TicketTypeSeatStatus['AVAILABLE'], 'Available'), (tickets.models.choices.TicketTypeSeatStatus['RESERVED'], 'Reserved'), (tickets.models.choices.TicketTypeSeatStatus['BOOKED'], 'Booked')], default=tickets.models.choices.TicketTypeSeatStatus['AVAILABLE'], max_length=20)),
                ('seat', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tickets.seat')),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_type_seats', to='tickets.tickettype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_saved', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[(tickets.models.choices.BookingStatus['PENDING'], 'Pending'), (tickets.models.choices.BookingStatus['TIMEDOUT'], 'Timedout'), (tickets.models.choices.BookingStatus['CONFIRMED'], 'Confirmed'), (tickets.models.choices.BookingStatus['CANCELLED'], 'Cancelled')], default=tickets.models.choices.BookingStatus['PENDING'], max_length=20)),
                ('seat', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tickets.tickettypeseat')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
